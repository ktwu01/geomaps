% Map_V8_1clear all; clc; close all;addpath 'D:\0lrn\00Res\Functions'addpath 'D:\0lrn\00Res\Functions\m_map'fsz = [10 13];%% create% Station informationSTs = {};sites = {};lons = [];lats = [];freqs = []; % frequencies, MHz% Svalbard (SVMR, 78.3°N, 16°E)STs = [STs, 'SVMR'];sites = [sites, 'Svalbard'];lons = [lons, 16];lats = [lats, 78.3];freqs = [freqs, 31]; % MHz% Tromsø (TRMR, 69.6°N, 19.2°E)STs = [STs, 'TRMR'];sites = [sites, 'Tromsø'];lons = [lons, 19.2];lats = [lats, 69.6];freqs = [freqs, 30.3]; % MHz% Mohe (MHMR, 53.5°N, 122.33°E)STs = [STs, 'MHMR'];sites = [sites, 'Mohe'];lons = [lons, 122+20/60];lats = [lats, 53+30/60];freqs = [freqs, 38.9]; % MHz% Beijing (BJMR, 40.3°N, 116.2°E)STs = [STs, 'BJMR'];sites = [sites, 'Beijing'];lons = [lons, 116.2];lats = [lats, 40.3];freqs = [freqs, 38.9]; % MHz% Mengcheng (MCMR, 33.3°N, 116.5°E)STs = [STs, 'MCMR'];sites = [sites, 'Mengcheng'];lons = [lons, 116.5];lats = [lats, 33.3];freqs = [freqs, 38.9]; % MHz% Wuhan (WHMR, 30.5°N, 114.2°E)STs = [STs, 'WHMR'];sites = [sites, 'Wuhan'];lons = [lons, 114.2];lats = [lats, 30.5];freqs = [freqs, 38.9]; % MHz% Kunming (KMMR, 25.6°N 103.8°N)STs = [STs, 'KMMR'];sites = [sites, 'Kunming'];lons = [lons, 103.8];lats = [lats, 25.6];freqs = [freqs, 37.5]; % MHz        % % Fuke (FKMR, 19.5°N, 109.1°E)        % STs = [STs, 'FKMR'];        % sites = [sites, 'Fuke'];        % lons = [lons, 109.1];        % lats = [lats, 19.5];        % freqs = [freqs, 38.9]; % MHz        % % Sanya (SYMR, 18.3°N, 109.6°E)        % STs = [STs, 'SYMR'];        % sites = [sites, 'Sanya'];        % lons = [lons, 109.6];        % lats = [lats, 18.3];        % freqs = [freqs, nan]; % MHz        % Ledong (LDMR, 18.4°N,109°E)        STs = [STs, 'LDMR'];        sites = [sites, 'Ledong'];        lons = [lons, 109];        lats = [lats, 18.4];        freqs = [freqs, 38.9]; % MHz% Kototabang (KTMR, 0.2°S, 100.3°E)STs = [STs, 'KTMR'];sites = [sites, 'Kototabang'];lons = [lons, 100.3];lats = [lats, -0.2];freqs = [freqs, 37.7]; % MHz% Ascension Island (ASSMR, 7.9°S, 14.4°W)STs = [STs, 'ASSMR'];sites = [sites, 'Ascension Island'];lons = [lons, -14.4];lats = [lats, -7.9];freqs = [freqs, 43.5]; % MHz% Darwin (DWMR, 12.3°S, 130.5°E),STs = [STs, 'DWMR'];sites = [sites, 'Darwin'];lons = [lons, 130.5];lats = [lats, -12.3];freqs = [freqs, 33.2]; % MHz% Andes Lidar Observatory (ALOMR, 30.3°S, 70.7°W)STs = [STs, 'ALOMR'];sites = [sites, 'Andes Lidar Observatory'];lons = [lons, -70.74];lats = [lats, -30.25];freqs = [freqs, 35.2]; % MHz% King Edward Point Station (KEPMR, 54°S, 36°W)STs = [STs, 'KEPMR'];sites = [sites, 'King Edward Point Station'];lons = [lons, -36];lats = [lats, -54];freqs = [freqs, 35.2]; % MHz% Davis Station (DVMR, 68.6°S, 77.9°E)STs = [STs, 'DVMR'];sites = [sites, 'Davis Station'];lons = [lons, 77.9];lats = [lats, -68.6];freqs = [freqs, 33.2]; % MHzfigure;whitefig;figpos([1 1])%% projgx = geoaxes;geolimits([-70 80],[0.000000001 -0.000000001 ]) %LAT, LON% geobasemap colorterrain% geobasemap landcovergeobasemap satelliteset(gx,'TickLabelFormat','dd')set(gx,'TickDir','out')% gx.LongitudeAxis.TickDirection = 'out';% gx.TickLabelFormat = 'dd';gx.LongitudeAxis.TickLabels = {'  0°' ,'  45°E' ,'  90°E' ,'  135°E' ,'  180°' ,'  135°W' ,'  90°W' ,'  45°W' ,'  0°'};grid offMRFontColor = 'yellow';%% TG Volcanocities = {'Hunga-Tonga Volcano'};TGlon = 175.3;TGlat = -20.54;TGfsz = 12; % Example font sizeshold on;text(TGlat, TGlon + 6, string(cities), 'FontSize', TGfsz, 'FontWeight', 'bold', 'Color', 'r');% {'▲'};markerSizes = 1:11; % Array of marker sizesfor markerSize = markerSizes    geoplot(TGlat, TGlon, 'r^', 'MarkerSize', markerSize);end%% antipodecities={'Antipode'};ATGlon = 175.3-180;ATGlat = 20.54;ATGfsz = 12; % Example font sizeshold on;text(ATGlat, ATGlon + 5, string(cities), 'FontSize', ATGfsz, 'FontWeight', 'bold', 'Color', 'b');% {'▽'};markerSizes = 1:11; % Array of marker sizesfor markerSize = markerSizes    geoplot(ATGlat, ATGlon, 'bv', 'MarkerSize', markerSize);end%% Meteor radarsfor k1=1:length(sites)% [range, ln, lt]=m_lldist([-123-6/60, lons(k)], [49+13/60, lats(k)], 40);     if lons(k1)>0        if strcmp(string(STs{k1}), 'MCMR')            hold on;            text(lats(k1)+2, lons(k1)+3.001, [string(sites{k1})+' ('+string(STs{k1})+', '+num2str(freqs(k1))+' MHz)'],'FontSize',fsz(1),'FontWeight','bold','Color', MRFontColor);            hold on;            geoplot(lats(k1), lons(k1), 'r.','MarkerSize',20);        elseif strcmp(string(STs{k1}), 'SVMR')            hold on;            text(lats(k1)-2, lons(k1)+3.001, [string(sites{k1})+' ('+string(STs{k1})+', '+num2str(freqs(k1))+' MHz)'],'FontSize',fsz(1),'FontWeight','bold','Color',MRFontColor,'HorizontalAlignment', 'center');            hold on;            geoplot(lats(k1), lons(k1), 'r.','MarkerSize',20);        elseif strcmp(string(STs{k1}), 'DVMR')            hold on;            text(lats(k1)+5, lons(k1)+3.001, [string(sites{k1})+' ('+string(STs{k1})+', '+num2str(freqs(k1))+' MHz)'],'FontSize',fsz(1),'FontWeight','bold','Color',MRFontColor,'HorizontalAlignment', 'center');            hold on;            geoplot(lats(k1), lons(k1), 'r.','MarkerSize',20);                    else            hold on;            text(lats(k1), lons(k1)+3.001, [string(sites{k1})+' ('+string(STs{k1})+', '+num2str(freqs(k1))+' MHz)'],'FontSize',fsz(1),'FontWeight','bold','Color', MRFontColor);            hold on;            geoplot(lats(k1), lons(k1), 'r.','MarkerSize',20);        end    else        if strcmp(string(STs{k1}), 'ALOMR') | strcmp(string(STs{k1}), 'ASSMR') | strcmp(string(STs{k1}), 'KEPMR')             hold on;            text(lats(k1), lons(k1)-3.001+360, [string(sites{k1})+' ('+string(STs{k1})+', '+num2str(freqs(k1))+' MHz)'],'FontSize',fsz(1),'FontWeight','bold','Color', MRFontColor,'HorizontalAlignment', 'right');            hold on;            geoplot(lats(k1), lons(k1)+360, 'r.','MarkerSize',20);        else            hold on;            text(lats(k1), lons(k1)+3.001, [string(sites{k1})+' ('+string(STs{k1})+', '+num2str(freqs(k1))+' MHz)'],'FontSize',fsz(1),'FontWeight','bold','Color', MRFontColor);            hold on;            geoplot(lats(k1), lons(k1), 'r.','MarkerSize',20);        end    endend%% EXPORT FIG ==============================================================% Set renderer to "painters"set(gcf, 'Renderer', 'painters');print(gcf,['Map_V8_1_t='],'-dpng','-r600');% saveas(gcf,'Map_V8_1_t=','epsc')% saveas(gcf,['Map_V8_1_t=','s'],'svg');disp('Figure Saved.');function [dist,lons,lats] = m_lldist(long,lat,N)% M_LLDIST Spherical earth distance between points in long/lat coordinates. %   RANGE=M_LLDIST(LONG,LAT) gives the distance in kilometers between%   successive points in the vectors LONG and LAT, computed%   using the Haversine formula on a spherical earth of radius%   6378.137km. Distances are probably good to better than 1% of the%   "true" distance on the ellipsoidal earth%%   [RANGE,LONGS,LATS]=M_LLDIST(LONG,LAT,N) computes the N-point geodesics%   between successive points. Each geodesic is returned on its%   own row of length N+1.%%   See also M_XYDIST% Rich Pawlowicz (rich@ocgy.ubc.ca) 6/Nov/00% This software is provided "as is" without warranty of any kind. But% it's mine, so you can't sell it.%% 30/Dec/2005 - added n-point geodesic computations, based on an algorithm%               coded by Jeff Barton at Johns Hopkins APL in an m-file%               I looked at at mathworks.com.    pi180=pi/180;    earth_radius=6378.137;        m=length(long)-1;        long1=reshape(long(1:end-1),m,1)*pi180;    long2=reshape(long(2:end)  ,m,1)*pi180;    lat1= reshape(lat(1:end-1) ,m,1)*pi180;    lat2= reshape(lat(2:end)   ,m,1)*pi180;        dlon = long2 - long1;     dlat = lat2 - lat1;     a = (sin(dlat/2)).^2 + cos(lat1) .* cos(lat2) .* (sin(dlon/2)).^2;    angles = 2 * atan2( sqrt(a), sqrt(1-a) );    dist = earth_radius * angles;            if nargin==3 && nargout>1   % Compute geodesics.          % Cartesian unit vectors in rows of v1,v2      v1=[cos(long1).*cos(lat1)   sin(long1).*cos(lat1)   sin(lat1) ];      v2=[cos(long2).*cos(lat2)   sin(long2).*cos(lat2)   sin(lat2) ];          % We want to get a unit vector tangent to the great circle.      n1=cross(v1,v2,2);       t1=cross(n1,v1,2);      t1=t1./repmat(sqrt(sum(t1.^2,2)),1,3);          lons=zeros(m,N+1);      lats=zeros(m,N+1);      for k=1:m           % Radials for all points       p1=v1(k,:)'*cos(angles(k)*[0:N]/N) + t1(k,:)'*sin(angles(k)*[0:N]/N);           lons(k,:)=atan2(p1(2,:),p1(1,:))/pi180;       lats(k,:)=asin(p1(3,:))/pi180;          end        endend